// This file is generated automatically by Next.js
// Do not edit this file manually

type AppRoutes = "/" | "/admin/dashboard" | "/admin/debug" | "/auth/error" | "/auth/forgot-password" | "/auth/login" | "/auth/sign-up" | "/auth/sign-up-success" | "/auth/update-password" | "/classic" | "/debug/chatbot" | "/protected" | "/protected/profile" | "/protected/profile/account" | "/protected/profile/account/artists" | "/protected/profile/account/friends" | "/protected/profile/account/settings" | "/protected/profile/account/venues" | "/protected/profile/events" | "/snapchat"
type AppRouteHandlerRoutes = "/api/admin/set-admin" | "/api/artists/search" | "/api/chat/embed" | "/api/chat/message" | "/api/chat/similar-events" | "/api/events/[eventId]/rsvp" | "/api/events/[eventId]/stats" | "/api/profile" | "/api/profile/[username]" | "/api/profile/artists" | "/api/profile/artists/calendar" | "/api/profile/events/history" | "/api/profile/events/upcoming" | "/api/profile/friends" | "/api/profile/username-check" | "/api/profile/venues" | "/api/venues/search" | "/auth/confirm"
type PageRoutes = never
type LayoutRoutes = "/" | "/admin" | "/protected" | "/protected/profile/account"
type RedirectRoutes = never
type RewriteRoutes = never
type Routes = AppRoutes | PageRoutes | LayoutRoutes | RedirectRoutes | RewriteRoutes | AppRouteHandlerRoutes


interface ParamMap {
  "/": {}
  "/admin": {}
  "/admin/dashboard": {}
  "/admin/debug": {}
  "/api/admin/set-admin": {}
  "/api/artists/search": {}
  "/api/chat/embed": {}
  "/api/chat/message": {}
  "/api/chat/similar-events": {}
  "/api/events/[eventId]/rsvp": { "eventId": string; }
  "/api/events/[eventId]/stats": { "eventId": string; }
  "/api/profile": {}
  "/api/profile/[username]": { "username": string; }
  "/api/profile/artists": {}
  "/api/profile/artists/calendar": {}
  "/api/profile/events/history": {}
  "/api/profile/events/upcoming": {}
  "/api/profile/friends": {}
  "/api/profile/username-check": {}
  "/api/profile/venues": {}
  "/api/venues/search": {}
  "/auth/confirm": {}
  "/auth/error": {}
  "/auth/forgot-password": {}
  "/auth/login": {}
  "/auth/sign-up": {}
  "/auth/sign-up-success": {}
  "/auth/update-password": {}
  "/classic": {}
  "/debug/chatbot": {}
  "/protected": {}
  "/protected/profile": {}
  "/protected/profile/account": {}
  "/protected/profile/account/artists": {}
  "/protected/profile/account/friends": {}
  "/protected/profile/account/settings": {}
  "/protected/profile/account/venues": {}
  "/protected/profile/events": {}
  "/snapchat": {}
}


export type ParamsOf<Route extends Routes> = ParamMap[Route]

interface LayoutSlotMap {
  "/": never
  "/admin": never
  "/protected": never
  "/protected/profile/account": never
}


export type { AppRoutes, PageRoutes, LayoutRoutes, RedirectRoutes, RewriteRoutes, ParamMap, AppRouteHandlerRoutes }

declare global {
  /**
   * Props for Next.js App Router page components
   * @example
   * ```tsx
   * export default function Page(props: PageProps<'/blog/[slug]'>) {
   *   const { slug } = await props.params
   *   return <div>Blog post: {slug}</div>
   * }
   * ```
   */
  interface PageProps<AppRoute extends AppRoutes> {
    params: Promise<ParamMap[AppRoute]>
    searchParams: Promise<Record<string, string | string[] | undefined>>
  }

  /**
   * Props for Next.js App Router layout components
   * @example
   * ```tsx
   * export default function Layout(props: LayoutProps<'/dashboard'>) {
   *   return <div>{props.children}</div>
   * }
   * ```
   */
  type LayoutProps<LayoutRoute extends LayoutRoutes> = {
    params: Promise<ParamMap[LayoutRoute]>
    children: React.ReactNode
  } & {
    [K in LayoutSlotMap[LayoutRoute]]: React.ReactNode
  }

  /**
   * Context for Next.js App Router route handlers
   * @example
   * ```tsx
   * export async function GET(request: NextRequest, context: RouteContext<'/api/users/[id]'>) {
   *   const { id } = await context.params
   *   return Response.json({ id })
   * }
   * ```
   */
  interface RouteContext<AppRouteHandlerRoute extends AppRouteHandlerRoutes> {
    params: Promise<ParamMap[AppRouteHandlerRoute]>
  }
}
